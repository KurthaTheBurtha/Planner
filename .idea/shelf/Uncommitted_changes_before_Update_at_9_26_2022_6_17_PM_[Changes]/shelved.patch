Index: src/homework.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\n\r\npublic class homework {\r\n    public static void main(String[] args) throws IOException {\r\n        Scanner file = new Scanner(new File(\"work\"));\r\n        String line =\"\";\r\n        String ddate;\r\n        String assn;\r\n        String sub;\r\n        HashMap<String, ArrayList<String>> assignments = new HashMap<String,ArrayList<String>>();\r\n        while(file.hasNextLine()) {\r\n            line = file.nextLine();\r\n            ddate = line.substring(0,line.indexOf(\" | \"));\r\n            assn = line.substring(line.indexOf(\" | \")+3);\r\n            if(!(assignments.containsKey(ddate))) {\r\n                assignments.put(ddate, new ArrayList<String>());\r\n            }\r\n//            if(assn.contains(\",\")){\r\n//                assignments.get(ddate).add(assn.substring(0,assn.indexOf(\",\")));\r\n//                for(int i = 1; i<=commaCount(assn)-1;i++){\r\n//\r\n//                    assignments.get(ddate).add(assn.substring(assn.indexOf(\",\")));\r\n//                }\r\n//            } else {\r\n//                assignments.get(ddate).add(assn);\r\n//            }\r\n        }\r\n        Scanner in = new Scanner(System.in);\r\n        System.out.print(\"Add assignment - 1: Remove Assignment - 2: View Assignments - 3: Clear Assignments - 4 | \");\r\n        String response = in.nextLine();\r\n        String ans = \"\";\r\n        while(true) {\r\n            if (response.equals(\"1\")) {\r\n                add(assignments);\r\n            }\r\n            else if(response.equals(\"2\")){\r\n                remove(assignments);\r\n            }\r\n            else if(response.equals(\"3\")){\r\n                print(assignments);\r\n            }\r\n            else if(response.equals(\"4\")){\r\n                assignments.clear();\r\n            }\r\n                System.out.println(\"Would you like to do anything else?\");\r\n                ans = in.nextLine();\r\n                if (ans.equalsIgnoreCase(\"n\")) {\r\n                    ans = \"\";\r\n                    break;\r\n                } else {\r\n                    System.out.print(\"Add assignment - 1: Remove Assignment - 2: View Assignments - 3: Clear Assignments - 4 | \");\r\n                    response = in.nextLine();\r\n                }\r\n\r\n\r\n        }\r\n        writeToFile(assignments);\r\n        print(assignments);\r\n    }\r\n    //prints a hashmap\r\n    public static void print(HashMap<String,ArrayList<String>> assignments){\r\n        int num=1;\r\n        for (HashMap.Entry<String,ArrayList<String>> s : assignments.entrySet()){\r\n            System.out.print(num+\". \");\r\n            System.out.print(s.getKey()+\" | \");\r\n            for(int i = 1; i<=assignments.get(s.getKey()).size();i++){\r\n                if(i==assignments.get(s.getKey()).size()) {\r\n                    System.out.print(s.getValue().get(i - 1));\r\n                } else{\r\n                    System.out.print(s.getValue().get(i - 1)+\",\");\r\n                }\r\n            }\r\n            System.out.println();\r\n            num++;\r\n        }\r\n    }\r\n    //adds an element to the HashMap\r\n    public static HashMap<String,ArrayList<String>> add(HashMap<String,ArrayList<String>> assignments){\r\n        Scanner in = new Scanner(System.in);\r\n        String ans = \"\";\r\n        System.out.println(\"Due Date\");\r\n        String duedate = in.nextLine();\r\n        System.out.println(\"Assignment Name\");\r\n        String assname = in.nextLine();\r\n        if(!(assignments.containsKey(duedate))) {\r\n            assignments.put(duedate, new ArrayList<String>());\r\n        }\r\n        assignments.get(duedate).add(assname);\r\n        System.out.println(\"Would you like to add another one?\");\r\n        ans = in.nextLine();\r\n        if(ans.equalsIgnoreCase(\"y\")){\r\n            add(assignments);\r\n        }\r\n        return assignments;\r\n    }\r\n    //removes an element from a HashMap\r\n    public static HashMap<String,ArrayList<String>> remove(HashMap<String,ArrayList<String>> assignments){\r\n        Scanner in = new Scanner(System.in);\r\n        System.out.println(\"Which one would you like to remove? Enter a number\");\r\n        print(assignments);\r\n        int ans = Integer.parseInt(in.nextLine());\r\n        int num=1;\r\n        for (HashMap.Entry<String,ArrayList<String>> s : assignments.entrySet()){\r\n            if(num==ans){\r\n                System.out.println(\"Which one would you like to remove?\");\r\n                for(int i = 1; i<=assignments.get(s.getKey()).size();i++){\r\n                    System.out.println(i+\". \"+s.getValue().get(i-1));\r\n                }\r\n                int ans2 = Integer.parseInt(in.nextLine());\r\n                s.getValue().remove(ans2-1);\r\n                break;\r\n            }\r\n            num++;\r\n        }\r\n        return assignments;\r\n    }\r\n    //writes elements from a HashMap to the file \"assignments\"\r\n    public static void writeToFile(HashMap<String,ArrayList<String>> assignments) throws IOException {\r\n        FileWriter fileWriter = new FileWriter(\"work\");\r\n        for (HashMap.Entry<String,ArrayList<String>> s : assignments.entrySet()) {\r\n            fileWriter.write(s.getKey() + \" | \");\r\n            for(int i = 1; i<=assignments.get(s.getKey()).size();i++){\r\n                if(i==assignments.get(s.getKey()).size()) {\r\n                    fileWriter.write(s.getValue().get(i - 1));\r\n                } else{\r\n                    fileWriter.write(s.getValue().get(i - 1)+\",\");\r\n                }\r\n            }\r\n            fileWriter.write(\"\\n\");\r\n        }\r\n        fileWriter.close();\r\n    }\r\n    public static int commaCount(String assignment){\r\n        int count =0;\r\n        for(int i = 0; i<assignment.length();i++){\r\n            if(assignment.charAt(i)==','){\r\n                count++;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework.java b/src/homework.java
--- a/src/homework.java	(revision a6448f9c1259a5d1f337fc971bde740cd6a007e5)
+++ b/src/homework.java	(date 1664238783676)
@@ -1,150 +1,17 @@
-
-import java.io.File;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Scanner;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Date;
 
 public class homework {
-    public static void main(String[] args) throws IOException {
-        Scanner file = new Scanner(new File("work"));
-        String line ="";
-        String ddate;
-        String assn;
-        String sub;
-        HashMap<String, ArrayList<String>> assignments = new HashMap<String,ArrayList<String>>();
-        while(file.hasNextLine()) {
-            line = file.nextLine();
-            ddate = line.substring(0,line.indexOf(" | "));
-            assn = line.substring(line.indexOf(" | ")+3);
-            if(!(assignments.containsKey(ddate))) {
-                assignments.put(ddate, new ArrayList<String>());
-            }
-//            if(assn.contains(",")){
-//                assignments.get(ddate).add(assn.substring(0,assn.indexOf(",")));
-//                for(int i = 1; i<=commaCount(assn)-1;i++){
-//
-//                    assignments.get(ddate).add(assn.substring(assn.indexOf(",")));
-//                }
-//            } else {
-//                assignments.get(ddate).add(assn);
-//            }
-        }
-        Scanner in = new Scanner(System.in);
-        System.out.print("Add assignment - 1: Remove Assignment - 2: View Assignments - 3: Clear Assignments - 4 | ");
-        String response = in.nextLine();
-        String ans = "";
-        while(true) {
-            if (response.equals("1")) {
-                add(assignments);
-            }
-            else if(response.equals("2")){
-                remove(assignments);
-            }
-            else if(response.equals("3")){
-                print(assignments);
-            }
-            else if(response.equals("4")){
-                assignments.clear();
-            }
-                System.out.println("Would you like to do anything else?");
-                ans = in.nextLine();
-                if (ans.equalsIgnoreCase("n")) {
-                    ans = "";
-                    break;
-                } else {
-                    System.out.print("Add assignment - 1: Remove Assignment - 2: View Assignments - 3: Clear Assignments - 4 | ");
-                    response = in.nextLine();
-                }
-
-
-        }
-        writeToFile(assignments);
-        print(assignments);
-    }
-    //prints a hashmap
-    public static void print(HashMap<String,ArrayList<String>> assignments){
-        int num=1;
-        for (HashMap.Entry<String,ArrayList<String>> s : assignments.entrySet()){
-            System.out.print(num+". ");
-            System.out.print(s.getKey()+" | ");
-            for(int i = 1; i<=assignments.get(s.getKey()).size();i++){
-                if(i==assignments.get(s.getKey()).size()) {
-                    System.out.print(s.getValue().get(i - 1));
-                } else{
-                    System.out.print(s.getValue().get(i - 1)+",");
-                }
-            }
-            System.out.println();
-            num++;
-        }
-    }
-    //adds an element to the HashMap
-    public static HashMap<String,ArrayList<String>> add(HashMap<String,ArrayList<String>> assignments){
-        Scanner in = new Scanner(System.in);
-        String ans = "";
-        System.out.println("Due Date");
-        String duedate = in.nextLine();
-        System.out.println("Assignment Name");
-        String assname = in.nextLine();
-        if(!(assignments.containsKey(duedate))) {
-            assignments.put(duedate, new ArrayList<String>());
-        }
-        assignments.get(duedate).add(assname);
-        System.out.println("Would you like to add another one?");
-        ans = in.nextLine();
-        if(ans.equalsIgnoreCase("y")){
-            add(assignments);
-        }
-        return assignments;
-    }
-    //removes an element from a HashMap
-    public static HashMap<String,ArrayList<String>> remove(HashMap<String,ArrayList<String>> assignments){
-        Scanner in = new Scanner(System.in);
-        System.out.println("Which one would you like to remove? Enter a number");
-        print(assignments);
-        int ans = Integer.parseInt(in.nextLine());
-        int num=1;
-        for (HashMap.Entry<String,ArrayList<String>> s : assignments.entrySet()){
-            if(num==ans){
-                System.out.println("Which one would you like to remove?");
-                for(int i = 1; i<=assignments.get(s.getKey()).size();i++){
-                    System.out.println(i+". "+s.getValue().get(i-1));
-                }
-                int ans2 = Integer.parseInt(in.nextLine());
-                s.getValue().remove(ans2-1);
-                break;
-            }
-            num++;
-        }
-        return assignments;
-    }
-    //writes elements from a HashMap to the file "assignments"
-    public static void writeToFile(HashMap<String,ArrayList<String>> assignments) throws IOException {
-        FileWriter fileWriter = new FileWriter("work");
-        for (HashMap.Entry<String,ArrayList<String>> s : assignments.entrySet()) {
-            fileWriter.write(s.getKey() + " | ");
-            for(int i = 1; i<=assignments.get(s.getKey()).size();i++){
-                if(i==assignments.get(s.getKey()).size()) {
-                    fileWriter.write(s.getValue().get(i - 1));
-                } else{
-                    fileWriter.write(s.getValue().get(i - 1)+",");
-                }
-            }
-            fileWriter.write("\n");
-        }
-        fileWriter.close();
-    }
-    public static int commaCount(String assignment){
-        int count =0;
-        for(int i = 0; i<assignment.length();i++){
-            if(assignment.charAt(i)==','){
-                count++;
-            }
-        }
-        return count;
-    }
-
-
+    public static void main(String[] args) {
+        SimpleDateFormat formatter =  new SimpleDateFormat("MM/dd");
+        Date date = new Date();
+        System.out.println(formatter.format(date));
+        Calendar calendar = Calendar.getInstance();
+        System.out.println(calendar.getTime().toString());
+        int day = calendar.get(Calendar.DAY_OF_WEEK);
+        System.out.println(day);
+        Date date1 = new Date(2024,12,31);
+        Date date2 = new Date();
+    }
 }
Index: src/homework1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/homework1.java b/src/school.java
rename from src/homework1.java
rename to src/school.java
--- a/src/homework1.java	(revision a6448f9c1259a5d1f337fc971bde740cd6a007e5)
+++ b/src/school.java	(date 1664238783682)
@@ -1,10 +1,12 @@
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
+import java.text.SimpleDateFormat;
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.Scanner;
 
-public class homework1
+public class school
 {
     public static void main(String[] args) throws IOException {
         Scanner input = new Scanner(System.in);
@@ -117,5 +119,10 @@
         }
         writer.close();
     }
+    public static void sort(ArrayList<Assignment> assignments){
+        SimpleDateFormat formatter =  new SimpleDateFormat("MM/dd");
+        Date date = new Date();
+        System.out.println(formatter.format(date));
+    }
 
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"79f927f5-dd10-4a4b-84b1-a3d706dc8879\" name=\"Changes\" comment=\"first version\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/work\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/work\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2F2jC3Q9pVlzPjUdSmS62uoZeie\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"79f927f5-dd10-4a4b-84b1-a3d706dc8879\" name=\"Changes\" comment=\"\" />\r\n      <created>1663696942460</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1663696942460</updated>\r\n      <workItem from=\"1663696949034\" duration=\"1470000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"first version\">\r\n      <created>1663697326875</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1663697326875</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"first version\">\r\n      <created>1663697562801</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1663697562801</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"first version\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"first version\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a6448f9c1259a5d1f337fc971bde740cd6a007e5)
+++ b/.idea/workspace.xml	(date 1664241441360)
@@ -1,9 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="79f927f5-dd10-4a4b-84b1-a3d706dc8879" name="Changes" comment="first version">
+    <list default="true" id="79f927f5-dd10-4a4b-84b1-a3d706dc8879" name="Changes" comment="Fully working">
+      <change afterPath="$PROJECT_DIR$/.idea/uiDesigner.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/work" beforeDir="false" afterPath="$PROJECT_DIR$/work" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/homework.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/homework.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/homework1.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/school.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -64,7 +66,14 @@
       <option name="project" value="LOCAL" />
       <updated>1663697562801</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="With Class Variable">
+      <created>1664063616099</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1664063616099</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -75,7 +84,19 @@
       <map>
         <entry key="MAIN">
           <value>
-            <State />
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="master" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
           </value>
         </entry>
       </map>
@@ -83,6 +104,24 @@
   </component>
   <component name="VcsManagerConfiguration">
     <MESSAGE value="first version" />
-    <option name="LAST_COMMIT_MESSAGE" value="first version" />
+    <MESSAGE value="With Class Variable" />
+    <MESSAGE value="Fully working" />
+    <option name="LAST_COMMIT_MESSAGE" value="Fully working" />
+  </component>
+  <component name="XDebuggerManager">
+    <breakpoint-manager>
+      <breakpoints>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/homework.java</url>
+          <line>13</line>
+          <option name="timeStamp" value="3" />
+        </line-breakpoint>
+        <line-breakpoint enabled="true" type="java-line">
+          <url>file://$PROJECT_DIR$/src/homework1.java</url>
+          <line>112</line>
+          <option name="timeStamp" value="8" />
+        </line-breakpoint>
+      </breakpoints>
+    </breakpoint-manager>
   </component>
 </project>
\ No newline at end of file
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1664238797472)
+++ b/.idea/uiDesigner.xml	(date 1664238797472)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.svg" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.svg" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.svg" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.svg" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
